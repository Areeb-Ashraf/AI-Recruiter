generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CANDIDATE)
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  interviews    Interview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  EMPLOYER
  CANDIDATE
}

model Job {
  id             String   @id @default(cuid())
  title          String
  company        String
  description    String
  requiredSkills String[]
  jobType        String
  salary         String?
  location       String
  postedDate     DateTime @default(now())
  employerId     String
  employer       User     @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applicantsCount Int     @default(0)
  requirements   String?  @db.Text
  responsibilities String? @db.Text
  interviews     Interview[]
}

enum InterviewStatus {
  PENDING       // Interview created but not started
  IN_PROGRESS   // Interview started but not completed
  PENDING_REVIEW // Waiting for AI analysis
  COMPLETED     // Analysis complete
  REJECTED      // Candidate rejected
  APPROVED      // Candidate approved for next round
}

model Interview {
  id          String   @id @default(cuid())
  jobId       String
  candidateId String
  date        DateTime @default(now())
  duration    Int?     // Duration in minutes
  status      InterviewStatus @default(PENDING)
  score       Int?     // 0-100 score
  feedback    String?  @db.Text
  transcript  String?  @db.Text  // JSON string of conversation
  strengths   String[] // Array of strengths identified
  improvements String[] // Areas for improvement
  completedAt DateTime?
  
  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate User @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, candidateId])
} 